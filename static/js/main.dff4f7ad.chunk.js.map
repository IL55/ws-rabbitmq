{"version":3,"sources":["rabbit-viewer.js","app.js","index.js"],"names":["QOS","utf8Decoder","TextDecoder","RabbitViewer","state","error","client","subscriptions","withErrorHandling","fn","apply","arguments","console","_this","setState","withFormHandling","event","preventDefault","data","Object","toConsumableArray","Array","target","length","keys","reduce","acc","index","field","name","objectSpread","defineProperty","value","connect","_ref","url","Mqtt","on","topic","message","prevState","map","subscription","messages","concat","decode","disconnect","asyncToGenerator","regenerator_default","a","mark","_callee","_this$state","wrap","_context","prev","next","unsubscribe","_ref3","end","stop","this","publish","_ref4","document","getElementById","qos","isSubscribedTo","some","subscribe","_ref6","_callee2","_ref5","_context2","abrupt","sent","_x","_ref7","_callee3","_context3","_ref8","filter","_x2","_this2","_this$state2","react_default","createElement","href","onSubmit","htmlFor","id","placeholder","defaultValue","required","type","_client","options","onClick","className","_ref9","key","Component","App","rabbit_viewer_RabbitViewer","ReactDOM","render","app"],"mappings":"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","file":"static/js/main.dff4f7ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Mqtt from 'async-mqtt';\n\nconst QOS = 2;\n\nconst utf8Decoder = new TextDecoder('utf-8');\n\nexport default class RabbitViewer extends Component {\n  state = {\n    error: null,\n    client: null,\n    subscriptions: []\n  };\n\n  withErrorHandling = fn => (...args) => {\n    try {\n      return fn(...args);\n    } catch (error) {\n      console.error(error);\n      this.setState({ error });\n    }\n  };\n\n  withFormHandling = fn =>\n    this.withErrorHandling(event => {\n      event.preventDefault();\n\n      const data = [...Array(event.target.length).keys()].reduce((acc, index) => {\n        const field = event.target[index];\n\n        if (!field.name) {\n          return acc;\n        }\n\n        return {\n          ...acc,\n          [field.name]: field.value\n        };\n      }, {});\n\n      return fn(data);\n    });\n\n  connect = this.withFormHandling(({ url }) => {\n    const client = Mqtt.connect(url);\n\n    client.on('connect', () => this.setState({ client }));\n\n    client.on('message', (topic, message) => {\n      this.setState(prevState => ({\n        subscriptions: prevState.subscriptions.map(subscription => {\n          if (subscription.topic !== topic) {\n            return subscription;\n          }\n\n          return {\n            ...subscription,\n            messages: [...subscription.messages, utf8Decoder.decode(message)]\n          };\n        })\n      }));\n    });\n  });\n\n  disconnect = this.withErrorHandling(async () => {\n    const { client, subscriptions } = this.state;\n\n    if (subscriptions.length > 0) {\n      await client.unsubscribe(subscriptions.map(({ topic }) => topic));\n    }\n\n    await client.end();\n\n    this.setState({\n      client: null,\n      subscriptions: []\n    });\n  });\n\n  publish = this.withFormHandling(({ topic, message }) => {\n    document.getElementById('publish-message').value = '';\n    this.state.client.publish(topic, message, { qos: QOS });\n  });\n\n  isSubscribedTo = this.withErrorHandling(topic =>\n    this.state.subscriptions.some(subscription => subscription.topic === topic)\n  );\n\n  subscribe = this.withFormHandling(async ({ topic }) => {\n    document.getElementById('subscribe-topic').value = '';\n\n    const { client } = this.state;\n\n    if (this.isSubscribedTo(topic)) {\n      return;\n    }\n\n    const subscriptions = await client.subscribe(topic, { qos: QOS });\n\n    this.setState(prevState => ({\n      subscriptions: [\n        ...prevState.subscriptions,\n        ...subscriptions.map(subscription => ({\n          topic: subscription.topic,\n          messages: []\n        }))\n      ]\n    }));\n  });\n\n  unsubscribe = this.withErrorHandling(async topic => {\n    await this.state.client.unsubscribe(topic);\n\n    this.setState(({ subscriptions }) => ({\n      subscriptions: subscriptions.filter(subscription => subscription.topic !== topic)\n    }));\n  });\n\n  render() {\n    const { error, client, subscriptions } = this.state;\n\n    if (error) {\n      return (\n        <p>\n          Oops, something went wrong! <a href=\"/\">Reload</a>\n        </p>\n      );\n    }\n\n    if (client === null) {\n      return (\n        <form onSubmit={this.connect}>\n          <label htmlFor=\"url\">URL*:</label>{' '}\n          <input id=\"url\" name=\"url\" placeholder=\"ws://\" defaultValue=\"ws://localhost:15675/ws\" required />{' '}\n          <input type=\"submit\" value=\"Connect\" />\n        </form>\n      );\n    }\n\n    return (\n      <div>\n        <div>\n          <h2>Status</h2>\n          <div>\n            Connected to {`${client._client.options.href} `}\n            <button type=\"button\" onClick={this.disconnect}>\n              Disconnect\n            </button>\n          </div>\n        </div>\n        <div>\n          <h2>Publish</h2>\n          <form onSubmit={this.publish}>\n            <div>\n              <label htmlFor=\"publish-topic\">Topic*:</label> <input id=\"publish-topic\" name=\"topic\" required />\n            </div>\n            <div>\n              <label htmlFor=\"publish-message\">Message*:</label> <input id=\"publish-message\" name=\"message\" required />\n            </div>\n            <input type=\"submit\" value=\"Publish\" />\n          </form>\n        </div>\n        <div>\n          <h2>Subscribe</h2>\n          <form onSubmit={this.subscribe}>\n            <label htmlFor=\"subscribe-topic\">Topic*:</label>{' '}\n            <input id=\"subscribe-topic\" name=\"topic\" required defaultValue=\"foo\" />{' '}\n            <input type=\"submit\" value=\"Subscribe\" />\n          </form>\n          <div className=\"topic-info\">\n            {subscriptions.map(({ topic, messages }) => (\n              <div key={topic}>\n                Message count for <strong>{topic}</strong>: {messages.length}{' '}\n                <button type=\"button\" onClick={() => this.unsubscribe(topic)}>\n                  Unsubscribe\n                </button>\n                <ul className=\"message-list\">\n                  {messages.map((message, index) => (\n                    <li key={index}>{message}</li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport RabbitViewer from './rabbit-viewer';\n\nconst App = () => <RabbitViewer />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './main.css';\n\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}